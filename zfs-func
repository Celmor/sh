# to source in bashrc

# pools to sync/compare between:
pool=( Data DataBackup DataNew )
# log file for stderror of zfs command
log=/tmp/zfs.log
# zfs wrapper function so stderr of zfs command doesn't 'flood' terminal
# for example if used wrong in which case stderr gets redirected to $log
zfs(){
        sudo /usr/bin/zfs 2> >(
                read -r && printf '%s\n' "$REPLY" >&2
                read -r && [ ! -z "$REPLY" ] \
                && printf 'more error output in "%s"\n' "$log" >&2 \
                && printf '\n%s\n' "[$(date --rfc-3339=seconds)]" >> "$log" \
                && printf '%s\n' "$REPLY" >> "$log"; cat >> "$log"
        )
}
# get pool name/root dir of a dataset/folder
getPool(){
        [ $# -ne 1 ] || [ -z "$1" ] && return 1
        [ "$(dirname "$1")" = "/" ] || [ "$(dirname "$1")" = "." ] \
        && printf '%s\n' "$1" && return 0
        printf '%s\n' "$(getPool "$(dirname "$1")")"
}
# compare $1 (which is a dir) between pools; choosing pool of $1 as master
comparePool(){
        [ $# -ne 1 ] || [ -z "$1" ] \
        && printf 'Usage: %s <filesystem>' "$0" && return 1
        root="$(getPool "$1")"; root=${root///}
        for i in "${pool[@]}"; do [ "$root" = "$i" ] && continue
        printf 'comparing "%s" -> %s:\n' "$root" "$i"
        sudo rsync -axHAXS --delete -i --dry-run "$1"/ /"$i${1//"/$root"}"/
        done
}
# sync $1 (which is a dir) between pools; choosing pool of $1 as master
syncPool(){
        [ $# -ne 1 ] || [ -z "$1" ] \
        && printf 'Usage: %s <filesystem>' "$0" && return 1
        root="$(getPool "$1")"; root=${root///}
        for i in "${pool[@]}"; do [ "$root" = "$i" ] && continue
        printf 'comparing "%s" -> %s:\n' "$root" "$i"
        sudo rsync -axHAXS -i --delete "$1/" /"$i${1//"/$root"}"/
        done
}
